#!/usr/bin/python
import os, sys, signal, time, argparse, imp
from os import path
from spock.utils import daemonize

signals = []

def handleSignal(sig, handle):
	signals.append(sig)
	signal.signal(sig, handle)

def printreturn(val):
	print str(val)
	return val

class ParsingError(Exception):
	pass

class spockparser(argparse.ArgumentParser):
	def exit(*args):
		raise ParsingError
	
	def _print_message(*args):
		pass


class spockd:
	def __init__(self):
		self.args = self.parseargs()

		self.stop = False
		self.pids = {}
		self.names = {}
		spockd_dir = path.join(path.expanduser('~'), '.spockd')
		self.dirs = {
			'spockd': spockd_dir,
			'proc': path.join(spockd_dir, 'proc'),
			'bots': path.join(spockd_dir, 'bots'),
			'logins': path.join(spockd_dir, 'logins'),
			'hosts': path.join(spockd_dir, 'hosts'),
		}
		self.inpipe = path.join(self.dirs['spockd'], 'inpipe')
		self.outpipe = path.join(self.dirs['spockd'], 'outpipe')
		self.pidfile = path.join(self.dirs['spockd'], 'spockd.pid')
		self.logfile = path.join(self.dirs['spockd'], 'spockd.log')

		self.parser = spockparser()
		sub_parsers = self.parser.add_subparsers()

		self.start_parser = sub_parsers.add_parser('start')
		self.start_parser.add_argument('name')
		self.start_parser.add_argument('-b', '--bot', required = True)
		self.start_parser.add_argument('-l', '--login', default = '')
		self.start_parser.add_argument('-U', '--user', default = '')
		self.start_parser.add_argument('-P', '--pass', default = '')
		self.start_parser.add_argument('-C', '--khost', default = '')
		self.start_parser.add_argument('-c', '--host', default = 'localhost')
		self.start_parser.add_argument('-p', '--port', default = 25565)
		self.stop_parser = sub_parsers.add_parser('stop')
		self.stop_parser.add_argument('name')


		self.commands = {
			'start': self.handle_start,
			'stop': self.handle_stop,
			#'restart': self.handle_restart,
			#'status': self.handle_status,
		}

	def parseargs(self):
		args = {}
		args['daemon'] = (True if (len(sys.argv)>1 and sys.argv[1] == '-D') else False)
		return args

	def start(self):

		for dpath in self.dirs.values():
			if not path.exists(dpath):
				os.makedirs(dpath)

		if path.exists(self.pidfile):
			print "spockd PID already exists"
			sys.exit(1)

		if not path.exists(self.inpipe):
			os.mkfifo(self.inpipe)
		if not path.exists(self.outpipe):
			os.mkfifo(self.outpipe)

		if self.args['daemon']:
			daemonize()
			sys.stdout = sys.stderr = open(self.logfile, 'w')
			print "Entered daemon mode"
			sys.stdout.flush()
			sys.stderr.flush()

		f = open(self.pidfile, 'w')
		f.write(str(os.getpid()))
		f.close()

		self.run()

	def run(self):
		while not self.stop:
			try:
				readpipe = open(self.inpipe, 'r')
				cmd = readpipe.read()
				readpipe.close()
				toreturn = self.run_cmd(cmd)
				writepipe = open(self.outpipe, 'w')
				writepipe.write(toreturn)
				writepipe.close()
				if self.args['daemon']:
					sys.stdout.flush()
					sys.stderr.flush()
			except IOError, e:
				if e.errno != 4:
					print str(e)
					self.exit()

	def run_cmd(self, cmd):
		if not cmd:
			return "No Command"
		cmd = cmd.split()
		op = cmd[0].lower()
		if not op in self.commands:
			return "Invalid Command"
		try:
			args = vars(self.parser.parse_args(cmd))
			toreturn = self.commands[op](args)
		except ParsingError, e:
			toreturn = ("Error parsing arguments\n"
				+self.parser.format_usage()
				+self.start_parser.format_usage()
				+self.stop_parser.format_usage()
			)

		return str(toreturn)


	def handle_start(self, args):
		username = ''
		password = ''
		if args['login']:
			f = path.join(self.dirs['logins'], args['login'])
			if not path.exists(f):
				return "No login file named: " + args['login']
			f = open(f, 'r')
			for line in f.readlines():
				line = line.split()
				if line[0].lower() == 'username' or line[0].lower() == 'user':
					username = line[2]
				if line[0].lower() == 'password' or line[0].lower() == 'pass':
					password = line[2]
			f.close()
		if not username and args['user']:
			username = args['user']
		if not password and args['pass']:
			password = args['pass']
		if not (password and username):
			return "Not enough login information"

		host = ''
		port = 0
		if args['khost']:
			f = path.join(self.dirs['hosts'], args['khost'])
			if not path.exists(f):
				return "No khost file named: " + args['login']
			f = open(f, 'r')
			for line in f.readlines():
				line = line.split()
				if line[0].lower() == 'host':
					host = line[2]
				if line[0].lower() == 'port':
					port = int(line[2])
		if not host:
			host = args['host']
		if not port:
			port = args['port']

		module = path.join(self.dirs['bots'], args['bot'])
		if not path.exists(module):
			module+='.py'
			if not path.exists(module):
				return "No bot file named: " + args['bot']
		botmod = imp.load_source('botmod', module)
		client = botmod.bot

		name = args['name']
		folder = path.join(self.dirs['proc'], name)
		pidfile = path.join(folder, name+'.pid')
		logfile = path.join(folder, name+'.log')
		if path.exists(pidfile):
			return "PID already exists for that name"
		if not path.exists(folder):
			os.makedirs(folder)

		pid = os.fork()
		#Child process
		if pid == 0:
			#Set the signal handlers back to default
			for sig in signals:
				signal.signal(sig, signal.SIG_DFL)
			client.daemon = True
			client.pidfile = pidfile
			client.logfile = logfile
			client.start(username, password, host, port)

		print "Created bot", name, "with PID:", pid
		self.pids[pid] = name
		self.names[name] = pid
		return pid

	def handle_stop(self, args):
		name = args['name']
		folder = path.join(self.dirs['proc'], name)
		pidfile = path.join(folder, name+'.pid')
		if not path.exists(pidfile):
			return "No PID exists for name: " + name
		pid = int(open(pidfile, 'r').readline())
		os.kill(pid, signal.SIGTERM)
		return printreturn("SIGTERM sent to " + name + ", PID: " + str(pid))

	def exit(self):
		for pid in self.pids:
			print "Sending SIGTERM to PID:", pid
			os.kill(pid, signal.SIGTERM)
		while self.pids:
			print "Waiting for all children to terminate..."
			time.sleep(1)
		print "All children terminated, shutting down"
		os.remove(self.pidfile)
		os.remove(self.inpipe)
		os.remove(self.outpipe)
		sys.exit(0)

	def handleSIGCHLD(self, *args):
		pid = os.waitpid(-1, 0)[0]
		name = self.pids[pid]
		del self.pids[pid]
		del self.names[name]
		print "Child", name, "with PID", pid, "has terminated"

	def handleSIGTERM(self, *args):
		self.exit()

	handleSIGINT = handleSIGTERM


spock_daemon = spockd()

handleSignal(signal.SIGCHLD, spock_daemon.handleSIGCHLD)
handleSignal(signal.SIGTERM, spock_daemon.handleSIGTERM)
handleSignal(signal.SIGINT, spock_daemon.handleSIGINT)

if __name__ == '__main__':
	spock_daemon.start()
